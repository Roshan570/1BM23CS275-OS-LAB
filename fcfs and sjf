#include <stdio.h>
#include <stdlib.h>

void findWaitingTime(int processes[], int n, int bt[], int wt[]) {
    wt[0] = 0;  // Waiting time for the first process is always 0

  
    for (int i = 1; i < n; i++) {
        wt[i] = bt[i - 1] + wt[i - 1];
    }
}

void findTurnaroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
    }
}

void findAverageTime(int processes[], int n, int bt[]) {
    int wt[n], tat[n];
    int total_wt = 0, total_tat = 0;

    findWaitingTime(processes, n, bt, wt);

    
    findTurnaroundTime(processes, n, bt, wt, tat);

    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }

  
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i], bt[i], wt[i], tat[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}

void sjfScheduling(int processes[], int n, int bt[]) {
    int wt[n], tat[n];
    int total_wt = 0, total_tat = 0;
    int temp, order[n];


    for (int i = 0; i < n; i++) {
        order[i] = i;
    }
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (bt[order[i]] > bt[order[j]]) {
          
                temp = order[i];
                order[i] = order[j];
                order[j] = temp;
            }
        }
    }

    findWaitingTime(order, n, bt, wt);
    findTurnaroundTime(order, n, bt, wt, tat);

  
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }

  
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[order[i]], bt[order[i]], wt[i], tat[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}

int main() {
    int n, choice;

  
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int processes[n], bt[n];


    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i] = i + 1;  
        printf("Process %d: ", processes[i]);
        scanf("%d", &bt[i]);
    }

    printf("\nChoose the scheduling algorithm:\n");
    printf("1. FCFS (First-Come-First-Serve)\n");
    printf("2. SJF (Shortest Job First)\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            findAverageTime(processes, n, bt);  
            break;
        case 2:
            sjfScheduling(processes, n, bt);  
            break;
        default:
            printf("Invalid choice\n");
    }

    return 0;
}

output:
Enter the number of processes: 4
Enter the burst time for each process:
Process 1: 6
Process 2: 8
Process 3: 7
Process 4: 3

Choose the scheduling algorithm:
1. FCFS (First-Come-First-Serve)
2. SJF (Shortest Job First)
Enter your choice: 2
Process    Burst Time    Waiting Time    Turnaround Time
4          3             0               3
1          6             3               9
3          7             9               16
2          8             16              24

Average Waiting Time: 7.00
Average Turnaround Time: 13.00
Enter your choice:1
Process    Burst Time    Waiting Time    Turnaround Time
1          6             0               6
2          8             6               14
3          7             14              21
4          3             21              24

Average Waiting Time: 12.25
Average Turnaround Time: 15.25

